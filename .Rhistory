getwd()
add2 <- function(x, y) {
x + y
}
add2(3,5)
above <- function(x, n) {
use <- x > n
x[use]
}
x <- 1:20
about(x,12)
above(x,12)
above <- function(x, n = 10) {
use <- x > n
x[use]
}
above(x)
columnmean <- function(y) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
mean[i] <- mean(y[, i])
}
means
}
airquality <- read.csv(hw1_data.csv)
getwd()
airquality <- read.csv("hw1_data.csv")
columnmean(airquality)
columnmean(airquality)
columnmean <- function(y) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[, i])
}
means
}
columnmean(airquality)
airquality
columnmean <- function(y, removeNA = TRUE) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[, i])
}
means
}
columnmean(airquality)
columnmean <- function(y, removeNA = TRUE) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[, i], na.rm = removeNA)
}
means
}
columnmean(airquality)
getwd()
source("pollutantmean.R")
pollutantmean("specdata")
pollutantmean("123")
source("pollutantmean.R")
pollutantmean("specdata")
source("pollutantmean.R")
pollutantmean("specdata",id=12)
source("pollutantmean.R")
pollutantmean("specdata",id=12)
source("pollutantmean.R")
pollutantmean("specdata",id=12)
source("pollutantmean.R")
pollutantmean("specdata",id=12)
source("pollutantmean.R")
pollutantmean("specdata","nitrate",12)
source("pollutantmean.R")
pollutantmean("specdata","nitrate",12)
source("pollutantmean.R")
pollutantmean("specdata","nitrate",12)
source("pollutantmean.R")
pollutantmean("specdata","nitrate",12)
source("pollutantmean.R")
pollutantmean("specdata","nitrate",12)
source("pollutantmean.R")
pollutantmean("specdata","nitrate",12)
x <- c(x, read.csv("/Users/MingLam/courseraR/specdata/012.csv")[["nitrate"]])
x
mean(x,na.rm = TRUE)
source("pollutantmean.R")
pollutantmean("specdata","nitrate",12)
source("pollutantmean.R")
pollutantmean("specdata","nitrate",12)
pollutantmean("specdata", "sulfate", 1:10)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "sulfate", 1:10)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 23)
source("pollutantmean.R")
pollutantmean("specdata", "nitrate", 23)
source("pollutantmean.R")
pollutantmean("specdata", "nitrate", 23)
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
source("complete.R")
complete("specdata",1)
complete("specdata", c(2, 4, 8, 10, 12))
complete("specdata", 30:25)
complete("specdata", 3)
source("corr.R")
cr <- corr("specdata", 150)
head(cr)
source("corr.R")
cr <- corr("specdata", 150)
head(cr)
source("corr.R")
cr <- corr("specdata", 150)
head(cr)
source("corr.R")
cr <- corr("specdata", 150)
head(cr)
source("corr.R")
cr <- corr("specdata", 150)
head(cr)
summary(cr)
cr <- corr("specdata", 400)
head(cr)
summary(cr)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
exit
exit()
library(datasets)
data("iris")
?iris
iris
s <- split(iris,iris$Species)
sapply(s,function(x) colMeans(x[, c("Sepal.Length")]))
sapply(s,function(x) colMeans(x[, c("Sepal.Length","Sepal.Width")]))
rowMeans(iris[, 1:4])
apply(iris[, 1:4], 1, mean)
apply(iris, 1, mean)
apply(iris, 1, mean)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcars
?iris
?mtcars
with(mtcars, tapply(mpg, cyl, mean))
mtcars
apply(mtcars, 2, mean)
lapply(mtcars, mean)
split(mtcars, mtcars$cyl)
with(mtcars, tapply(hp, cyl, mean))
x <- tapply(mtcars$hp, mtcars$cyl, mean)
x(8)-x(4)
x['8']-x['4']
debug(ls)
ls()
# The first function, makeCachMatrix creates a special "martix" object
# that can cache its inverse. This function is really a list
# containing a function to
# 1. set the value of the matrix
# 2. get the value of the matrix
# 3. set the value of the inverse
# 4. get the value of the inverse
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
# The following fuction computes the inverse of the special "matrix"
# created with the above function. However, it first checks to see if
# the inverse has already been computed. if so, it gets the inverse
# from the cache and skips the computation. Otherwise, it computes the
# inverse of the matrix and sets the value of the inverse in the cache
# via the setinverse function.
# This function assume that the matrix supplied is always invertible.
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- inverse(data, ...)
x$setinverse(inv)
inv
}
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
m$get()
cacheSolve(m)
# The first function, makeCachMatrix creates a special "martix" object
# that can cache its inverse. This function is really a list
# containing a function to
# 1. set the value of the matrix
# 2. get the value of the matrix
# 3. set the value of the inverse
# 4. get the value of the inverse
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
# The following fuction computes the inverse of the special "matrix"
# created with the above function. However, it first checks to see if
# the inverse has already been computed. if so, it gets the inverse
# from the cache and skips the computation. Otherwise, it computes the
# inverse of the matrix and sets the value of the inverse in the cache
# via the setinverse function.
# This function assume that the matrix supplied is always invertible.
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinverse(inv)
inv
}
cacheSolve(m)
cacheSolve(m)
installed.packages("xlsx")
install.packages("xlsx")
library(xlsx)
install.packages("rJava")
install.packages("rJava")
getwd()
cd "getdata/"
cd "./getdata/"
setwd("./getdata/")
getwd()
run_analysis.R
run <- run_analysis.R
source("run_analysis.R")
download.data
download < download.data()
download <- download.data()
data <- download
merge.datasets(data)
clean.data()
